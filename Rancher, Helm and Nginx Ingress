#Rancher is a graphical user interface for kubernetes
#It provide a kubernetes platform
#WIth Rancher we can Import and manage multiple Kubernetes
#We can create clusters like EKS/AKS/GKE
#Racher provide dashboards for kubernetes
#Rancher is deployed using docker
#To install Rancher on docker use the command below
docker run -d --restart=unless-stopped -p 80:80 -p 443:443 --privileged rancher/rancher:latest

#How to integrate an existing cluster into Rancher
1. Click on Home
2. select import existing cluster
3. Follow all the prompt
4. Copy and Run the command that will show in the dashboard 

#If your comapny alone give you the website address to the rancher website to run your workload. To access kubernetes on the cli:
1. On top of the rancher dashbord, beside the "Only User Namespace" to the right you will see a sign like "sim-card" which is the "KubeConfig"
2. Download it and copy it
3. Go to the cli an dlogin into a server
4. vi .kube/config and paste the "KubeConfig" file into it
5. This will allow you to run your workload



#Note
#If you hAVE imported a cluster to rancher before it will create some name space like "cattle fleet" if you want to import the cluster to another Rancher
You have to delete the cattle namespace. To delete use the command:


#HELMS
Helm chart is basically just a collection of manifest files organized in a specific directory structure that describe a related kubernetes resource
Helm is a package manager for kubernetes

#How to install Helm 3
#vi into helm.sh and patse the commands below
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh
Now run the command uning sh helm.sh
Now you can run helm command
Create a directory for helm chart using mkdir helm chart and cd into it (Not required)
1. helm create javaapp
2. This will create the javaapp and you can cd into it and ls to see the chart in it
3. helm template javaapp : This will automatically vi into a manifest template yaml file
4.You can cd into "javapp" that was created and you will see the charts, template and value files
5.You can "vi" into the value file and change the necessary field 
6 You can now run "helm install "anyname you like" "javapp which is the name of the chart you created"

OR

7. helm show values javaapp: This is where values are created into the templates
8. If you not satisfy with what is values you can redirect it using the command: helm show values javaapp > anyname you like e.g value.yaml
9. This will automatically create a value.yaml file in which you can vi into and edit
10. if you cd into the templates directory and ls, you will see alot of kubernetes templates object yaml file like deployment.yaml, service.yaml etc

To deploy the application
Run the command "helm install name you want to give to your deployment name of the helm you created which was javaapp here -f name of the file you 
redirect the value file into e.g helm intall app29 javaapp/ -f value.yaml
if you have run the install command and made a changes in the file again to effect the changes use the commang "helm upgrade"

In helm to change to another version or upgrade to another verzion 
1. You have to vi into the value.yaml file in the chart ccreated and change the neccesary things like the image name and tag
2. Then use the command " helm upgrade "the name you gave to the application before" "Name of your chart"



Create Custom heml charts for application
Push helm charts into helm repositories 
Update existing helm charts into helm repositories
Use helm 


How to add helm repository to your cluster using github pages
Step 1: Create a folder and a GitHub repository. ...
Step 2: Clone the GitHub repository. ...
Step 3: Add robots.txt at the root location of the repository. ...
echo -e “User-Agent: *\nDisallow: /” > robots.txt 
Step 4: Package your Helm chart. ...
Helm package charts/observability-service/ 
Step 5: Finally, create the index.yaml file for the Helm repository.
Helm repo index --url <github_repository_path> . 
Now run 
git status 
git add . 
git commit -m "your_commit_message"
git config --global user.name "petertaiwo034"
git config --global user.email "petertaiwo034@gmail.com"
git remote add pl "git repository url"
git push alias name branch name
Step 7: Create GitHub Pages once the code is pushed to GitHub 
Go to settings of your GitHub repository -> Pages:
Select your branch in the Source section.
Click on Save.
You will find a link for your public Helm chart repository. 
Click on the link and wait for some time to see your README.md contents on the screen, as shown below.

To add your file into the helm repository
Helm repo add "name of the file in the repo"  <github_repository_path_page> 


Nginx InGress
Since we can't give our user the Node IP and NodePort to access the application. We have to go and craete a DNS for it on route 53
If we have created a name DNS for the user to acess it we need to create ingress to integrate the DNS name and the service we created for the application 
together.
Installing Nginx Ingress controller using Helm
1. git clone https://github.com/nginxinc/kubernetes-ingress.git --branch v2.4.1
2. cd kubernetes-ingress/deployments/helm-chart
3. Adding the Helm Repository
This step is required if you’re installing the chart via the helm repository.
$ helm repo add nginx-stable https://helm.nginx.com/stable
$ helm repo update
$ helm search repo nginx-ingress
$ helm install nginx nginx-ingress/nginx-ingress
$ helm template nginx-ingress/nginx-ingress
$ helm show values nginx-ingress/nginx-ingress

This will create a load blanacer in AWS, the load balancer can be used to create DNS NAME in route 53. 

Now create an Ingress object yaml file
Host-based routing ( This is for multiple Application)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-wildcard-host
spec:
  rules:
  - host: "foo.bar.com"
    http:
      paths:
      - pathType: Prefix
        path: "/bar"
        backend:
          service:
            name: service1
            port:
              number: 80
  - host: "*.foo.com"
    http:
      paths:
      - pathType: Prefix
        path: "/foo"
        backend:
          service:
            name: service2
            port:
              number: 80
              
Path-based routing ( This is for Micro-services)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-fanout-example
spec:
  rules:
  - host: foo.bar.com
    http:
      paths:
      - path: /foo
        pathType: Prefix
        backend:
          service:
            name: service1
            port:
              number: 4200
      - path: /bar
        pathType: Prefix
        backend:
          service:
            name: service2
            port:
              number: 8080



